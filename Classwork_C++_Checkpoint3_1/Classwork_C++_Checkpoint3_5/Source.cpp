#include <iostream>
using namespace std;

/*
2. *Написать программу, которая заменяет все символы точки "."
в строке, введенной пользователем, на символы восклицательного знака "!".

3. *Написать программу, которая заменяет все символы
вопросительного знака "?" в строке, введенной пользователем,
на символы "1".

4. *Пользователь вводит строку, посчитать, сколько в ней символов "%".

Написать ф-ции:
1) Вычисления длины строки;
2) функцию копирования строк - копирование одной строки в другую;
2) функцию конкатенации (сцепления) двух строк;

5. *Пользователь вводит строку символов и искомый символ,
посчитать сколько раз он встречается в строке.

6. Подсчитать количество слов во введенном предложении.
a) * между словами находится только 1 пробел
b) **пробелы также могут располагаться вначале и в конце предложения.
c) ***пробелы могут располагаться вначале и в конце предложения,
и между словами может быть более 1 пробела.

7.**Пользователь вводит строку и слово. Осуществить
в этой строке поиск заданного слова.
*/

int main()
{
	setlocale(LC_ALL, "Rus");
	//system("chcp 1251 > nul");

	// строка в стиле языка С/С++, С-строка, С-подобная строка
	//  ANSI-строка, ASCII-строка
	char str1[/*5+1*/] = "H_llo"; // + '\0' - автоматически добавляет компилятор
	//int a = 0;
	//int b = 0x30313233;  // "3210"
	// массив символов - не строка
	//  заполнение инициализационным списком - списочная инициализация массива
	char str2[/*5+1*/] = { 'H', 'e', 'l', 'l', 'o', '\0' };

	cout << "str1: " << str1 << endl;
	cout << "str2: " << str2 << endl;

	cin.get(); cin.get();
}

#include <iostream>
#include <string.h>  // strlen(), strcpy(), strXXX
using namespace std;

/*
2. *Написать программу, которая заменяет все символы точки "."
в строке, введенной пользователем, на символы восклицательного знака "!".

3. *Написать программу, которая заменяет все символы
вопросительного знака "?" в строке, введенной пользователем,
на символы "1".

4. *Пользователь вводит строку, посчитать, сколько в ней символов "%".

Написать ф-ции:
1) Вычисления длины строки;
2) функцию копирования строк - копирование одной строки в другую;
2) функцию конкатенации (сцепления) двух строк;

5. *Пользователь вводит строку символов и искомый символ,
посчитать сколько раз он встречается в строке.

6. Подсчитать количество слов во введенном предложении.
a) * между словами находится только 1 пробел
b) **пробелы также могут располагаться вначале и в конце предложения.
c) ***пробелы могут располагаться вначале и в конце предложения,
и между словами может быть более 1 пробела.

7.**Пользователь вводит строку и слово. Осуществить
в этой строке поиск заданного слова.
*/

#define SIZE 1000

int StrLen(char* str);

int main()
{
	//setlocale(LC_ALL, "Rus");
	system("chcp 1251 > nul");

	char buffer[SIZE]; // символьный массив, буфер для чтения строки с консоли
	cout << "Введите строку, предложение: ";
	//cin >> buffer; // чтение одного слова
	cin.getline(buffer, SIZE); // чтение всего предложения, всех слов до <ENTER>
	cout << "Ваша строка: \"" << buffer << "\"" << endl;
	//
	cout << "Длина строки: " << StrLen(buffer) << " символов\n";
	// strlen() - бибдиотечная ф-ция языка C/C++ для определения
	//  длины строки
	cout << "strlen(buffer) = " << strlen(buffer) << endl;

	cin.get(); cin.get();
}

// Ф-ция определения длины строки - кол-во симолов до '\0'
int StrLen(char* str)
{
	// 1 вариант
	int len = 0; // длина строки
	// цикл обхода строки до нуль-терминирующего символа '\0'
	for (int i = 0; str[i] != '\0'; i++) {
		len++; // подсчет символов
	}
	return len; // возаращаем длину строки

	/*// 2 вариант
	char* p = str;
	//while (*p != '\0') { p++; }
	while (*p++);
	return p - str - 1;*/
}

#include <iostream>
#include <string.h>  // strlen(), strcpy(), strXXX
using namespace std;

/*
2. *Написать программу, которая заменяет все символы точки "."
в строке, введенной пользователем, на символы
восклицательного знака "!".

3. *Написать программу, которая заменяет все символы
вопросительного знака "?" в строке, введенной пользователем,
на символы "1".

4. *Пользователь вводит строку, посчитать, сколько в ней символов "%".

Написать ф-ции:
1) Вычисления длины строки;
2) функцию копирования строк - копирование одной строки в другую;
2) функцию конкатенации (сцепления) двух строк;

5. *Пользователь вводит строку символов и искомый символ,
посчитать сколько раз он встречается в строке.

6. Подсчитать количество слов во введенном предложении.
a) * между словами находится только 1 пробел
b) **пробелы также могут располагаться вначале и в конце предложения.
c) ***пробелы могут располагаться вначале и в конце предложения,
и между словами может быть более 1 пробела.

7.**Пользователь вводит строку и слово. Осуществить
в этой строке поиск заданного слова.
*/

/*
2. *Написать программу, которая заменяет все символы точки "."
в строке, введенной пользователем, на символы
восклицательного знака "!".
*/

#define SIZE 2000   
char* ZamC(char* str, char fi = '.', char za = '!');

int main()
{
	//setlocale(LC_ALL, "Rus");
	system("chcp 1251 > nul");
	const int size = 2000;
	cout << "Введите строку: ";
	char* buffer = new char[size];
	cin.getline(buffer, size);
	cout << buffer << endl;
	cout << "Результат: " << ZamC(buffer) << endl;
	//cout << "Результат: " << ZamC(buffer, '.', '!') << endl;
	//
	char c1, c2;
	cout << "Введите символ для поиска: ";
	cin >> c1;
	cout << "Введите символ для замены: ";
	cin >> c2;
	cout << "Результат: " << ZamC(buffer, c1, c2) << endl;

	cin.get(); cin.get();
}

char* ZamC(char* str, char fi, char za)
{
	/*for  ( int i = 0; str [i] != '\0'; i++)
	{
	  if (str [i] == fi)
	  {
		str[i] = za;
	  }
	}
	return str;*/
	// 2 вариант
	char* ptemp = str;
	while (*ptemp) { // while (*ptemp != '\0')
		if (*ptemp == fi) { *ptemp = za; }
		ptemp++;
	}
	return str;
}

#include <iostream>
#include <string.h>  // strlen(), strcpy(), strXXX
using namespace std;

/*
Написать ф-ции:
1) Вычисления длины строки; +
2) функцию копирования строк - копирование одной строки в другую;
3) функцию конкатенации (сцепления) двух строк;

7.**Пользователь вводит строку и слово. Осуществить
в этой строке поиск заданного слова.
*/

/*
6. Подсчитать количество слов во введенном предложении.
a) * между словами находится только 1 пробел
b) **пробелы также могут располагаться вначале и в конце
 предложения.
c) ***пробелы могут располагаться вначале и в конце
 предложения, и между словами может быть более 1 пробела.
*/
#define SIZE 2000   
int Func_count_word(char* str);
int main()
{
	system("chcp 1251 > nul");

	const int size = 2000;
	cout << "Введите строку: ";
	char* buffer = new char[size];
	cin.getline(buffer, size);
	cout << "\"" << buffer << "\"" << endl;
	cout << "Кол-во слов :" << Func_count_word(buffer) << endl;

	delete[]buffer; // удаление динамической строки
	cin.get(); cin.get();
}

int Func_count_word(char* str)
{
	if (str[0] == '\0') { return 0; }
	int count = 0;
	for (int i = 0; str[i] != '\0'; i++) {
		if (str[i] == ' ') {
			count++;
		}
	}
	return count + 1;
}

#include <iostream>
#include <string.h>  // strlen(), strcpy(), strXXX
using namespace std;

/*
Написать ф-ции:
1) Вычисления длины строки; +
2) функцию копирования строк - копирование одной строки в другую;
3) функцию конкатенации (сцепления) двух строк;

7.**Пользователь вводит строку и слово. Осуществить
в этой строке поиск заданного слова.
*/

/*
6. Подсчитать количество слов во введенном предложении.
a) * между словами находится только 1 пробел
b) **пробелы также могут располагаться вначале и в конце
 предложения.
c) ***пробелы могут располагаться вначале и в конце
 предложения, и между словами может быть более 1 пробела.
*/
#define SIZE 2000   
int Func_count_word(char* str);
int main()
{
	system("chcp 1251 > nul");

	const int size = 2000;
	cout << "Введите строку: ";
	char* buffer = new char[size];
	cin.getline(buffer, size);
	cout << "\"" << buffer << "\"" << endl;
	cout << "Кол-во слов :" << Func_count_word(buffer) << endl;

	delete[]buffer; // удаление динамической строки
	cin.get(); cin.get();
}

int Func_count_word(char* str)
{
	if (str[0] == '\0') { return 0; }
	int count = 0;
	if (str[0] != ' ') { count = 1; }
	for (int i = 0; *(str + i) != '\0'; i++) {
		if (str[i] == ' ' && *(str + i + 1) != ' ' && str[i + 1] != '\0') {
			count++;
		}
	}
	return count;
}
